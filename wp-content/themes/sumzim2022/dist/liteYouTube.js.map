{"version":3,"file":"liteYouTube.js","mappings":"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","sources":["webpack://underscores/./src/lite-yt-embed.js"],"sourcesContent":["/**\n * A lightweight youtube embed. Still should feel the same to the user, just MUCH faster to initialize and paint.\n *\n * Thx to these as the inspiration\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\n *   https://autoplay-youtube-player.glitch.me/\n *\n * Once built it, I also found these:\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (👍👍)\n *   https://github.com/Daugilas/lazyYT\n *   https://github.com/vb/lazyframe\n */\nclass LiteYTEmbed extends HTMLElement {\n    connectedCallback() {\n        this.videoId = this.getAttribute('videoid');\n\n        let playBtnEl = this.querySelector('.lty-playbtn');\n        // A label for the button takes priority over a [playlabel] attribute on the custom-element\n        this.playLabel = (playBtnEl && playBtnEl.textContent.trim()) || this.getAttribute('playlabel') || 'Play';\n\n        this.dataset.title = this.getAttribute('title') || \"\";\n\n        /**\n         * Lo, the youtube poster image!  (aka the thumbnail, image placeholder, etc)\n         *\n         * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md\n         */\n        if (!this.style.backgroundImage) {\n          this.style.backgroundImage = `url(\"https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg\")`;\n          this.upgradePosterImage();\n        }\n\n        // Set up play button, and its visually hidden label\n        if (!playBtnEl) {\n            playBtnEl = document.createElement('button');\n            playBtnEl.type = 'button';\n            playBtnEl.classList.add('lty-playbtn');\n            this.append(playBtnEl);\n        }\n        if (!playBtnEl.textContent) {\n            const playBtnLabelEl = document.createElement('span');\n            playBtnLabelEl.className = 'lyt-visually-hidden';\n            playBtnLabelEl.textContent = this.playLabel;\n            playBtnEl.append(playBtnLabelEl);\n        }\n\n        this.addNoscriptIframe();\n\n        // for the PE pattern, change anchor's semantics to button\n        if(playBtnEl.nodeName === 'A'){\n            playBtnEl.removeAttribute('href');\n            playBtnEl.setAttribute('tabindex', '0');\n            playBtnEl.setAttribute('role', 'button');\n            // fake button needs keyboard help\n            playBtnEl.addEventListener('keydown', e => {\n                if( e.key === 'Enter' || e.key === ' ' ){\n                    e.preventDefault();\n                    this.activate();\n                }\n            });\n        }\n\n        // On hover (or tap), warm up the TCP connections we're (likely) about to use.\n        this.addEventListener('pointerover', LiteYTEmbed.warmConnections, {once: true});\n        this.addEventListener('focusin', LiteYTEmbed.warmConnections, {once: true});\n\n        // Once the user clicks, add the real iframe and drop our play button\n        // TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time\n        //   We'd want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003\n        this.addEventListener('click', this.activate);\n\n        // Chrome & Edge desktop have no problem with the basic YouTube Embed with ?autoplay=1\n        // However Safari desktop and most/all mobile browsers do not successfully track the user gesture of clicking through the creation/loading of the iframe,\n        // so they don't autoplay automatically. Instead we must load an additional 2 sequential JS files (1KB + 165KB) (un-br) for the YT Player API\n        // TODO: Try loading the the YT API in parallel with our iframe and then attaching/playing it. #82\n        this.needsYTApi = this.hasAttribute(\"js-api\") || navigator.vendor.includes('Apple') || navigator.userAgent.includes('Mobi');\n    }\n\n    /**\n     * Add a <link rel={preload | preconnect} ...> to the head\n     */\n    static addPrefetch(kind, url, as) {\n        const linkEl = document.createElement('link');\n        linkEl.rel = kind;\n        linkEl.href = url;\n        if (as) {\n            linkEl.as = as;\n        }\n        document.head.append(linkEl);\n    }\n\n    /**\n     * Begin pre-connecting to warm up the iframe load\n     * Since the embed's network requests load within its iframe,\n     *   preload/prefetch'ing them outside the iframe will only cause double-downloads.\n     * So, the best we can do is warm up a few connections to origins that are in the critical path.\n     *\n     * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267\n     * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.\n     */\n    static warmConnections() {\n        if (LiteYTEmbed.preconnected) return;\n\n        // The iframe document and most of its subresources come right off youtube.com\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.youtube-nocookie.com');\n        // The botguard script is fetched off from google.com\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.google.com');\n\n        // Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.\n        LiteYTEmbed.addPrefetch('preconnect', 'https://googleads.g.doubleclick.net');\n        LiteYTEmbed.addPrefetch('preconnect', 'https://static.doubleclick.net');\n\n        LiteYTEmbed.preconnected = true;\n    }\n\n    fetchYTPlayerApi() {\n        if (window.YT || (window.YT && window.YT.Player)) return;\n\n        this.ytApiPromise = new Promise((res, rej) => {\n            var el = document.createElement('script');\n            el.src = 'https://www.youtube.com/iframe_api';\n            el.async = true;\n            el.onload = _ => {\n                YT.ready(res);\n            };\n            el.onerror = rej;\n            this.append(el);\n        });\n    }\n\n    /** Return the YT Player API instance. (Public L-YT-E API) */\n    async getYTPlayer() {\n        if(!this.playerPromise) {\n            await this.activate();\n        }\n\n        return this.playerPromise;\n    }\n\n    async addYTPlayerIframe() {\n        this.fetchYTPlayerApi();\n        await this.ytApiPromise;\n\n        const videoPlaceholderEl = document.createElement('div')\n        this.append(videoPlaceholderEl);\n\n        const paramsObj = Object.fromEntries(this.getParams().entries());\n\n        this.playerPromise = new Promise(resolve => {\n            let player = new YT.Player(videoPlaceholderEl, {\n                width: '100%',\n                videoId: this.videoId,\n                playerVars: paramsObj,\n                events: {\n                    'onReady': event => {\n                        event.target.playVideo();\n                        resolve(player);\n                    }\n                }\n            });\n        });\n    }\n\n    // Add the iframe within <noscript> for indexability discoverability. See https://github.com/paulirish/lite-youtube-embed/issues/105\n    addNoscriptIframe() {\n        const iframeEl = this.createBasicIframe();\n        const noscriptEl = document.createElement('noscript');\n        // Appending into noscript isn't equivalant for mysterious reasons: https://html.spec.whatwg.org/multipage/scripting.html#the-noscript-element\n        noscriptEl.innerHTML = iframeEl.outerHTML;\n        this.append(noscriptEl);\n    }\n\n    getParams() {\n        const params = new URLSearchParams(this.getAttribute('params') || []);\n        params.append('autoplay', '1');\n        params.append('playsinline', '1');\n        return params;\n    }\n\n    async activate(){\n        if (this.classList.contains('lyt-activated')) return;\n        this.classList.add('lyt-activated');\n\n        if (this.needsYTApi) {\n            return this.addYTPlayerIframe(this.getParams());\n        }\n\n        const iframeEl = this.createBasicIframe();\n        this.append(iframeEl);\n\n        // Set focus for a11y\n        iframeEl.focus();\n    }\n\n    createBasicIframe(){\n        const iframeEl = document.createElement('iframe');\n        iframeEl.width = 560;\n        iframeEl.height = 315;\n        // No encoding necessary as [title] is safe. https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#:~:text=Safe%20HTML%20Attributes%20include\n        iframeEl.title = this.playLabel;\n        iframeEl.allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';\n        iframeEl.allowFullscreen = true;\n        // AFAIK, the encoding here isn't necessary for XSS, but we'll do it only because this is a URL\n        // https://stackoverflow.com/q/64959723/89484\n        iframeEl.src = `https://www.youtube-nocookie.com/embed/${encodeURIComponent(this.videoId)}?${this.getParams().toString()}`;\n        return iframeEl;\n    }\n\n    /**\n     * In the spirit of the `lowsrc` attribute and progressive JPEGs, we'll upgrade the reliable\n     * poster image to a higher resolution one, if it's available.\n     * Interestingly this sddefault webp is often smaller in filesize, but we will still attempt it second\n     * because getting _an_ image in front of the user if our first priority.\n     *\n     * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md for more details\n     */\n    upgradePosterImage() {\n         // Defer to reduce network contention.\n        setTimeout(() => {\n            const webpUrl = `https://i.ytimg.com/vi_webp/${this.videoId}/sddefault.webp`;\n            const img = new Image();\n            img.fetchPriority = 'low'; // low priority to reduce network contention\n            img.referrerpolicy = 'origin'; // Not 100% sure it's needed, but https://github.com/ampproject/amphtml/pull/3940\n            img.src = webpUrl;\n            img.onload = e => {\n                // A pretty ugly hack since onerror won't fire on YouTube image 404. This is (probably) due to\n                // Youtube's style of returning data even with a 404 status. That data is a 120x90 placeholder image.\n                // … per \"annoying yt 404 behavior\" in the .md\n                const noAvailablePoster = e.target.naturalHeight == 90 && e.target.naturalWidth == 120;\n                if (noAvailablePoster) return;\n\n                this.style.backgroundImage = `url(\"${webpUrl}\")`;\n            }\n        }, 100);\n    }\n}\n// Register custom element\ncustomElements.define('lite-youtube', LiteYTEmbed);\n"],"names":["LiteYTEmbed","HTMLElement","connectedCallback","this","videoId","getAttribute","playBtnEl","querySelector","playLabel","textContent","trim","dataset","title","style","backgroundImage","upgradePosterImage","document","createElement","type","classList","add","append","playBtnLabelEl","className","addNoscriptIframe","nodeName","removeAttribute","setAttribute","addEventListener","e","key","preventDefault","activate","warmConnections","once","needsYTApi","hasAttribute","navigator","vendor","includes","userAgent","static","kind","url","as","linkEl","rel","href","head","preconnected","addPrefetch","fetchYTPlayerApi","window","YT","Player","ytApiPromise","Promise","res","rej","el","src","async","onload","_","ready","onerror","playerPromise","videoPlaceholderEl","paramsObj","Object","fromEntries","getParams","entries","resolve","player","width","playerVars","events","event","target","playVideo","iframeEl","createBasicIframe","noscriptEl","innerHTML","outerHTML","params","URLSearchParams","contains","addYTPlayerIframe","focus","height","allow","allowFullscreen","encodeURIComponent","toString","setTimeout","webpUrl","img","Image","fetchPriority","referrerpolicy","naturalHeight","naturalWidth","customElements","define"],"sourceRoot":""}